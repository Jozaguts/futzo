import {
  rangesMerge
} from "./chunk-W7KSBM75.js";
import {
  formatInfinity
} from "./chunk-ZX6GOGJL.js";
import {
  isNullish
} from "./chunk-Z5IVBZLV.js";
import {
  isEmpty
} from "./chunk-MYOGSMXY.js";

// src/ranges/ranges-crop/ranges-crop.ts
var rangesCrop = (ranges, start = null, end = null, infinityToNull = false) => {
  if (isEmpty(ranges)) return [];
  if (isNullish(start)) start = -Infinity;
  if (isNullish(end)) end = Infinity;
  return rangesMerge(ranges, true, infinityToNull).map((range) => [
    isNullish(range[0]) ? -Infinity : range[0],
    isNullish(range[1]) ? Infinity : range[1]
  ]).filter((range) => range[1] >= start && range[0] <= end).map((range) => {
    let [first, second] = range;
    if (first < start) first = start;
    if (second > end) second = end;
    return [
      formatInfinity(first, infinityToNull),
      formatInfinity(second, infinityToNull)
    ];
  });
};

export {
  rangesCrop
};
